// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
 

model User {
  id       String   @id @default(uuid())
  email    String   @unique
  name     String?
  password String
  about String?
  posts    Post[]
  saved    Saved[]
  followers String[]
  following String[]
  realTimePosts UserRealTimePosts[]
  comments  Comment[]

}

model Post {
  id        String   @id @default(uuid())
  title     String
  content   String
  published Boolean  @default(false)
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  publishedDate DateTime @default(now()) @db.Date
  anonymous Boolean @default(false)
  likes String[]
  savedBy    Saved[]
  comments Comment[]
 
}

model Saved {
  id        String   @id @default(uuid())
  user      String
  userId    User   @relation(fields: [user],references: [id])
  post      String
  postId    Post   @relation(fields: [post],references: [id])
}

model RealTimePost {
  id            String            @id @default(uuid())
  title         String
  content       String
  published     Boolean           @default(false)
  publishedDate DateTime          @default(now()) @db.Date
  anonymous     Boolean           @default(false)
  likes         String[]
  authors       UserRealTimePosts[]
  changelog     ChangeLog[]
}

model UserRealTimePosts {
  userId       String
  realTimePostId String

  user          User     @relation(fields: [userId], references: [id])
  realTimePost  RealTimePost @relation(fields: [realTimePostId], references: [id])

  @@id([userId, realTimePostId])
}

model Comment {
  id        String        @id @default(uuid())
  post      Post      @relation(fields: [postId], references: [id])
  postId    String
  user      User      @relation(fields: [userId], references: [id])
  userId    String
  text      String
  createdAt DateTime  @default(now())

  // Self-referencing relationship: A comment can have many replies (nested comments)
  parent    Comment?  @relation("CommentToReplies", fields: [parentId], references: [id])
  parentId  String?
  replies   Comment[] @relation("CommentToReplies")
}

model ChangeLog {
  id        String   @id @default(cuid())
  postId    String
  author    String
  line       Int
  text       String
  timestamp DateTime @default(now())
  post      RealTimePost @relation(fields: [postId], references: [id])
}
